//   Copyright 2017-2019 Davinci Codes
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// Also use the software for non-commercial purposes.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE

///////////////////////////////////////////////////////////
//  CustomThreading.cs
//  Implementation of the Class TCustomThreading
//  Generated by Davinci Jeremie
//  Created on:      10-Nov-2005 11:26:32 AM
///////////////////////////////////////////////////////////

using System;
using System.Diagnostics;
using System.Threading;

namespace Pandora.Client.Universal.Threading
{
    public delegate void DelegateThreadStopped(object sender);

    public class PumpRunningException : Exception
    {
        public PumpRunningException(string message) : base(message)
        {
        }
    }

    public class MethodJetThread : MethodJet
    {
        private Thread FCurrentThread = null;
        private EventWaitHandle FRunSignal;

        public MethodJetThread()
            : base()
        {
            FRunSignal = new EventWaitHandle(false, EventResetMode.ManualReset);
        }

        public Thread ActiveThread => FCurrentThread;

        public override bool RunAsynchronous => true;

        protected void Abort()
        {
            ActiveThread.Abort();
        }

        protected override void InternalRun()
        {
            try
            {
                base.InternalRun();
            }
            catch (Exception E)
            {
                if (E is ThreadAbortException)
                {
                    return;
                }

                string lEvent = "Bad Thread Termination - Critical Error - " + E.GetBaseException().Message + " - " + E.GetBaseException().StackTrace;
                Log.WriteAppEvent(lEvent, EventLogEntryType.Error, Log.SE_ID_Critical_Error);
            }
        }

        public override void Run()
        {
            if (Running)
            {
                throw new PumpRunningException("MethodPumpThread already running.");
            }

            FCurrentThread = new Thread(new ThreadStart(InternalRun))
            {
                Name = string.Format("{0}.dll {1}", System.Reflection.Assembly.GetExecutingAssembly().GetName().Name, GetType().ToString())
            };
            FCurrentThread.Start();
            FRunSignal.WaitOne();
        }

        protected override void InternalInitialize()
        {
            try
            {
                base.InternalInitialize();
            }
            finally
            {
                FRunSignal.Set();
            }
        }
    }
}