///////////////////////////////////////////////////////////
//  CustomThreading.cs
//  Implementation of the Class TCustomThreading
//  Generated by Davinci Jeremie
//  Created on:      10-Nov-2005 11:26:32 AM
///////////////////////////////////////////////////////////

using System;
using System.Threading;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Reflection;
using System.Runtime;

namespace Pandora.Client.Universal.Threading
{
    
    public delegate void DelegateThreadStopped(object sender);
    public class PumpRunningException : Exception
    { 
        public PumpRunningException(string message) : base(message) { }
    }

    public class MethodJetThread : MethodJet
    {
        private Thread FCurrentThread = null;
        private EventWaitHandle FRunSignal;

        public MethodJetThread()
            : base()
        {
            FRunSignal = new EventWaitHandle(false, EventResetMode.ManualReset);
        }

        public Thread ActiveThread
        {
            get
            {
                return FCurrentThread;
            }
        }

        public override bool RunAsynchronous
        {
            get
            {
                return true;
            }
        }

        protected void Abort()
        {
            ActiveThread.Abort();
        }

        protected override void InternalRun()
        {
            try
            {
                base.InternalRun();
            }
            catch (Exception E)
            {
                if (E is ThreadAbortException)
                    return;
                string lEvent = "Bad Thread Termination - Critical Error - " + E.GetBaseException().Message + " - " + E.GetBaseException().StackTrace;
                Log.WriteAppEvent(lEvent, EventLogEntryType.Error, Log.SE_ID_Critical_Error);
            }

        }


        public override void Run()
        {
            if (Running)
                throw new PumpRunningException("MethodPumpThread already running.");
            FCurrentThread = new Thread(new ThreadStart(this.InternalRun));
            FCurrentThread.Name = String.Format("{0}.dll {1}", System.Reflection.Assembly.GetExecutingAssembly().GetName().Name, GetType().ToString());
            FCurrentThread.Start();
            FRunSignal.WaitOne();
        }

        protected override void InternalInitialize()
        {
            try
            {
                base.InternalInitialize();
            }
            finally
            {
                FRunSignal.Set();
            }
        }
    }

}