using System;
using System.Text;
using System.Collections.Generic;
using Pandora.Client.ClientLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Pandora.Client.Crypto.Currencies.Ethereum.ContractFunctions;
using Nethereum.Contracts;
using System.Linq;
using Pandora.Client.Crypto.Currencies.Ethereum.ContractFunctions.Models;

namespace Pandora.Client.Crypto.Currencies.Ethereum.Test
{
    /// <summary>
    /// Summary description for UnitTest1
    /// </summary>
    [TestClass]
    public class Ethereum_UnitTest
    {
        private EthChainParams FEthChainParams;

        public Ethereum_UnitTest()
        {
            var lParms = new ChainParams();

            lParms.Capabilities = CapablityFlags.EthereumProtocol;
            lParms.NetworkName = "Ethereum";
            FEthChainParams = new EthChainParams(lParms);
            EthereumCurrencyAdvocacy.Register();
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes

        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //

        #endregion Additional test attributes

        [TestMethod]
        public void CreateObjectTest()
        {
            Assert.IsTrue(CurrencyControl.GetClientCurrencyAdvocacy(1000, FEthChainParams, () => "6A41F49D98D83DF2EEB89F8E895D2269") is EthereumCurrencyAdvocacy, "Error EthereumCurrencyAdvocacy not returned");
        }

        [TestMethod]
        public void CreateAddressTest()
        {
            var lAdvocacy = new EthereumCurrencyAdvocacy(1000, FEthChainParams, () => "6A41F49D98D83DF2EEB89F8E895D22697A41F49D98D83DF2EEB89F8E895D2269");
            var lString = lAdvocacy.GetAddress(0);
            Assert.AreEqual("0xFF3225E2c09280797F5848Ad204e9c0C331Af2c0", lString);
        }

        [TestMethod]
        public void GetPrivateKeyTest()
        {
            var lAdvocacy = new EthereumCurrencyAdvocacy(1000, FEthChainParams, () => "6A41F49D98D83DF2EEB89F8E895D22697A41F49D98D83DF2EEB89F8E895D2269");
            var lString = lAdvocacy.GetAddress(0);
            Assert.AreEqual("0xFF3225E2c09280797F5848Ad204e9c0C331Af2c0", lString);
            lString = lAdvocacy.GetPrivateKey(0);
            Assert.AreEqual("BBE1487FBBC49B4390B8A6C723E480944634AD52DC6EA203466576B98FD51132", lString);
        }

        [TestMethod]
        public void SignTxTest()
        {
            var lTx = new CurrencyTransaction();
            var lAdvocacy = new EthereumCurrencyAdvocacy(1000, FEthChainParams, () => "6A41F49D98D83DF2EEB89F8E895D22697A41F49D98D83DF2EEB89F8E895D2269");
            var lString = lAdvocacy.GetAddress(0);
            Assert.AreEqual("0xFF3225E2c09280797F5848Ad204e9c0C331Af2c0", lString);
            // 1 eth is 1 Quintillion 1, or 1000 Quadrillion
            // 1,000,000,000,000,000,000 Wei (1018)
            lTx.AddInput(13689000000000000, lString); // how much I have
            lTx.TxFee = 420000000000000;   // fee to pay
            lTx.AddOutput(1100000000000000, "0x596a2232d098965bc56b762549E045829CF43c8D"); // amount to move
            var ldata = lAdvocacy.SignTransaction("30", lTx);
            Assert.AreEqual("f8728087019945ca2620008704cbd15e72600094596a2232d098965bc56b762549e045829cf43c8d8703e871b540c000801ca0fb1f1e416a5b9d22b2b34242807e0c41994e1be4909cc16370b5187011a109fea03165afb74b0d47138e86e2faec57bce8079bdd7024937d64c8fdc454d2dfc512", ldata);
        }

        [TestMethod]
        public void DecodeBulkTokenTx()
        {
            string lTestInput = @"f6fff9bd0000000000000000000000005d269fac3b2e0552b0f34cdc253bdb427682a4b9000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000012e0302d313630393534393235343030302d393600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000092000000000000000000000000d1917932a7db6af687b523d5db5d7f5c2734763f0000000000000000000000009474a2d24eb074aa295510ff75e7c4d5d2f498ee0000000000000000000000009b81cc3454b8103c5ff4b68602d4c0cc5ff4415e00000000000000000000000093ecf1a260cd14ee9ebbe340d6a8930c62e5b92b0000000000000000000000003c072e4f7c116cbb5bdbf5dfde30a3c65b45832700000000000000000000000030eaaa3018603c63583198a38c8ca4ed4fece04e000000000000000000000000a40f949030c9f5b429d6240ea3e3328f659f67c100000000000000000000000037f26fa48da26b7a0df4129f9a856f884278a5e500000000000000000000000083ac8a9c740192bf93c8da2a6409fe2cb2841f300000000000000000000000000aef82500ca67a10983b3ff694da5e19f27351e3000000000000000000000000e79aff89d3a7bb633320c88f9a77be917a1135520000000000000000000000000141d10fadae9bc771db268166006b3f21ba6a6b000000000000000000000000851aa39eeca611208a92a90ff447cfac6d0e6891000000000000000000000000543af924fe6831850e359c7b88ca985824dd94c8000000000000000000000000b87c8bf9207942bccdc5095aa756a5c5aa1387ab00000000000000000000000080e2bd2a977db6200dd8d79df275e648369ebe33000000000000000000000000896c42d89069d92564f8ac9f8ecc6e3813f464960000000000000000000000005312ff7154eaeb988b82e0d09a8b95997da89fa9000000000000000000000000fae1d2e7bcf91d9f32f748fac0d50a58ffb44f94000000000000000000000000beb594466db52c49459074a3d146a0009e8251410000000000000000000000002b91d868f7bcc5ee1d8c5af6a5b917366c513abd0000000000000000000000009c8bf1ef9e47e5ca3921a7b5cd31e729eb5271d400000000000000000000000007b3a40571ae47bc5c39d3d466303aac3b736023000000000000000000000000025b740df53d06c00bcdb106706fd709e4305c64000000000000000000000000404cda0090d150a546c1a2ef5360b6ceec93db490000000000000000000000008dc38e08b525ba6cf9456fb1cdaaddfc00ff9aab0000000000000000000000004fa4d658dd767edb7ea78399ce58254da870bddd000000000000000000000000507f44d14ff467c67c898425a1aabc52467e8c8c00000000000000000000000037c70cd671888b960135706feed27dd3d3af0de7000000000000000000000000ded43b0fa1716718217bc6c129b25fdb2478a0c800000000000000000000000027d111fe5352a83877464a3c2a61be40a90a04640000000000000000000000006d0accda1abdcdd94144ab6b47ed371b3e9acac20000000000000000000000009ea12128fa176c840b5a8dbababf1ba0c7628936000000000000000000000000a28fb3e94e339a850522a7c19e127bc255824df400000000000000000000000002da2ae7d3738c9c84484693d3d2578fd6bcb9c10000000000000000000000003e2d4c27493d30788a00d7226748de16097a64ad0000000000000000000000003b292651542376d8c11d43b5c6c46727817e0dc600000000000000000000000090a162fbc07e1794c9820a16d4ae6f304292424f000000000000000000000000ee814cb3f798d6e14ad6fb41432262b361525729000000000000000000000000ced0bb63449fa4f70e82878d1b1a04ecbc15291c0000000000000000000000009af91846973ea0cb3f1a693f150e17de7e2e408600000000000000000000000050f01e957a34a3f9591360b545c386daa1590d56000000000000000000000000059cc065e617d79cca28066e06af37bd7fa7a250000000000000000000000000029b3eeab1fd4463023037b8fdce3ab6b6c9114c000000000000000000000000f8461bf2e166f9171c8bb3ecf9a0fc316e0b3305000000000000000000000000c20ca5552ee1783e95f05170631fdcaf325ac7c0000000000000000000000000734372b31b6f9ad407167822b31343be341d2f29000000000000000000000000c190934e65f629ffc1e41705965a963defe294020000000000000000000000001e8a0af06f47f2ae719cb03026ba36cfbe929bce000000000000000000000000b7da869a0e4a251087fb32c628e8555d44961e18000000000000000000000000058c24281c17c78bda702f0d2edb079f2a996a50000000000000000000000000843b7ec833f0d7f3f3a7dbcdf0c8ed9ef88806f40000000000000000000000006b8f02e1f31c2164edab6ddd42a0b9853e4caead0000000000000000000000000a5d4f766c43885fbb59f0cc315e6df08e65ba4c000000000000000000000000723768d03fcf0acbdad997fb599ce8a2ef50d329000000000000000000000000961f96d0499c80166203f2b0b988df6f5b0f5a3c000000000000000000000000771f5f411f52b8cc9eee53c31f8820ce3c786a84000000000000000000000000536d3e07834b1fabbcbffe650d71e8f5e5a625db000000000000000000000000e08f38c70c4ad373e35283cd232ef14d24cb8071000000000000000000000000cbf3817f4a4e7345a4229ee5eae103cbaf5b155b0000000000000000000000006c523590e45499b21b24651f9705016eb529497c000000000000000000000000fc633441830792af207d93a14c6ab7150f561a34000000000000000000000000043a6fe7d339ef5f77ac10194dc73da5269703800000000000000000000000001f08ce4d91a5ac0cf9ad45d93a01ce5bbe6239f50000000000000000000000005984947020a5ec3f71c76e531c311e2e9173395800000000000000000000000080d352b09d12a9d735857c780480cb1d19a671d500000000000000000000000031b012e46b94272cdb961831c3bb285415141b1f00000000000000000000000052ca87c6e82dcf558b9b10c90e95eb58a1011504000000000000000000000000b2fb977e9d306637e15f2a1ab5335d5084c01e4300000000000000000000000006f370a5424e236e72cb9b1d8d2070d143fd52e0000000000000000000000000066b0863860708181ccfdae3d858ba13c781ca68000000000000000000000000109ea546182dac883ce7a22fe5e8c032ce53e19a000000000000000000000000fc68f336934e426d6f9c542c0b6259a8a4a148f50000000000000000000000001f6cdd4dcd907b5b972b2efc046b33da44107c0e000000000000000000000000bea4754beebdb03b61b87347c2cf9abd3c2dbd1b0000000000000000000000006d814624d7d08d718da4ecb66db6736c04d578b3000000000000000000000000a5e49fee1cc2d9b8fd542d66eebda24e02a596f200000000000000000000000000d7cf66546f86b024482cd884564cc4783b03fa000000000000000000000000319dc1e361483c36c2a16aac6919acc7d12fae860000000000000000000000002893a250897f8874c3ad3dc8cca58c46e45dfbb00000000000000000000000003a419374c00d13a14368d3fd1918c8b4d92633a0000000000000000000000000d9f2128fa1bd27d41eb56505e58d7085b49e252c0000000000000000000000006a4c51fe144c4038d08d3e74b821b3e1d594ac4900000000000000000000000012b6aaf38c5c7b721731674270be854a1f8f20010000000000000000000000001c4a24a1525b3bf77002c24d03ba1ab22c7b063000000000000000000000000054d56f02c9ea4d98f2f6d8c64b9f28ec6166ce6000000000000000000000000089c8b7611d5efb5a8ae659d478731e49b411b81b000000000000000000000000b3292b530ebb06346081afd81fc177a95caf5aac0000000000000000000000003458d3e373c65b11f851be8cd110cb60d1a3ddc6000000000000000000000000af3f70b7486b04d632adbad57365e2cb91b992d1000000000000000000000000202c02383406fc3e7b99204eac1d711b8d3476eb0000000000000000000000001e68a419829a9c48f08b1cc2a80efa4b9843814800000000000000000000000071dc011edd5745a55b45da06570f50039e50e74e000000000000000000000000155cee4d22ac781ce7fb0341a73d95535ca772a400000000000000000000000059f0390d9295ab30274c3e758aa2b7f841090d05000000000000000000000000c995921a88f6b3890bee8003fa2e32ffd0cd76c200000000000000000000000007ab2a2c3711378dea92d4b3ba2afd065b8be1ab0000000000000000000000006f7e26686ee0e99f33c28a8fe8544c9fcd5f197e0000000000000000000000000c288c3e5cd22c95a96ef8f19bbe66557fc8582c000000000000000000000000d18f1013ee395704f5b8d8640b30e6dd7a6ff217000000000000000000000000b881fca95d29698a08b1b42fbb029f9d10d60f6f00000000000000000000000011a2eb9f1f72c3b4e30ab48ce9047c1701e3675000000000000000000000000048c7a978a2859cdc06bb7704e29a7d727388c1ad00000000000000000000000047704152be65bcaba7171535e655e6f3d8c928f9000000000000000000000000e7e11b5446c90f126ad77712e413b82e3d5baf2e000000000000000000000000071caf81334bf3c9009f110f5ffe93424378b15e00000000000000000000000052b771fd8ddf5255a56085c4e8a4501cd96f4d2c0000000000000000000000009fe4e3834c7b19a1397936b5e802912c6947bbbf00000000000000000000000058c8b7be9a6a678a9356fb594b60fad3bb1aeb96000000000000000000000000f0e2b7cbd64a7a5baeb5c689436f49dfeb289a43000000000000000000000000244a81fdd1484611bbda923d34d4220c6acad22a0000000000000000000000004872470e516b6f2d0bacee8e90bf72db553cda51000000000000000000000000d0e80fa980d75ecdadb7977e1c08d57c01169e09000000000000000000000000674facebcec5971fb27820516aec72e74f64fa41000000000000000000000000d82d108b51379929b81642d9249d4cad16439d86000000000000000000000000f52fad83ea69927f2580bf870292e104c20e81d600000000000000000000000097964e117fd3ccb567d6cd1e22035e0dbfa0c5c900000000000000000000000085e1bce8303061721846400951a70b38c7000547000000000000000000000000bd72cf5df164cd579a10a2dfc884da22cbabea61000000000000000000000000ad0484ed842b98715a7a24c122ca989cbb2d61dc00000000000000000000000008af32afa9e735d19c3d82424505d5227354e8e100000000000000000000000010b3c2f3e665e0dbb8b5b5c829352299de97f8e3000000000000000000000000db6f592af01157394bdbf4c89669353b32f2f635000000000000000000000000b17a267cf5051ff1dd4facb89ce02ec9afb7697200000000000000000000000005c2e87690679c7e4ec524c302db945ea37703880000000000000000000000007a50198d1d4ed7a68b078ec847b4970ab034d77f0000000000000000000000000cffa823b3cdae1222533b3089612fb881c5267200000000000000000000000052920706d1f41c95ffb83bcd3d9427d0f22af603000000000000000000000000ffa66e2e3a8c10a68a239aac26aa4bdb85b17134000000000000000000000000ee8f40b9a13b12221f16c0ad3efecb9f7e541e99000000000000000000000000305a7f331e5b3bcb86bb0cb798c779db75194310000000000000000000000000fe3ec9470d85994812639068151dae19d0064ee100000000000000000000000039c133eefc730355dd99a8d713e1c2d1ff15983000000000000000000000000066e6f3923d78ddfd9423ca265d2427df76d1c91d0000000000000000000000003aa115ec7fa11c2088f0cfbc65318e47bfda1d460000000000000000000000009477641db47b5d89f26b01f5504e8f8c6b0785370000000000000000000000003b4b97dddfe414ef776c458451a194ae7082da8b00000000000000000000000045656a8a9790e70948040fec76e99aebad227e7400000000000000000000000034f97372260dba19b59336d342d652fbc80265a9000000000000000000000000e6c6b9a6801bffeb36780991888b8dd752aa1879000000000000000000000000ed38bebfa378a332f5bf11a831d29c349bfec804000000000000000000000000a0be68662913d199b407c12bd55031471770c7ed0000000000000000000000008a2daaa19305ac0254e2747679edf62f1e9a33bc000000000000000000000000b4f149d091aa51b42a5a7344257471646d9d92ba00000000000000000000000071525171ff4c0b7996d2ad265faf56770eac25740000000000000000000000000223d9f6efc676b44e5eb743aedd046f5f9a26a30000000000000000000000000000000000000000000000000000000000000092000000000000000000000000000000000000000000000000000000435de3ea0f00000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000bf046a3e000000000000000000000000000000000000000000000000000000015b4dd8710000000000000000000000000000000000000000000000000000000208f4c4aa0000000000000000000000000000000000000000000000000000000022bafc0b0000000000000000000000000000000000000000000000000000000039e24ebe00000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ab3d7e46000000000000000000000000000000000000000000000000000000002e4ea56400000000000000000000000000000000000000000000000000000000e7893af600000000000000000000000000000000000000000000000000000000e7893af600000000000000000000000000000000000000000000000000000000ada6ec39000000000000000000000000000000000000000000000000000000003fac236a00000000000000000000000000000000000000000000000000000000125476cd000000000000000000000000000000000000000000000000000000006927ece9000000000000000000000000000000000000000000000000000000003e4039b4000000000000000000000000000000000000000000000000000000004e62754b000000000000000000000000000000000000000000000000000000006830f4220000000000000000000000000000000000000000000000000000000039e24ebe000000000000000000000000000000000000000000000000000000002e4ea56400000000000000000000000000000000000000000000000000000000ada6ec39000000000000000000000000000000000000000000000000000000006830f422000000000000000000000000000000000000000000000000000000003e39ae3f000000000000000000000000000000000000000000000000000000002b69bb0e00000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6e90f000000000000000000000000000000000000000000000000000000002e4ea56400000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000303c96f30000000000000000000000000000000000000000000000000000000054e5848e000000000000000000000000000000000000000000000000000000002e588662000000000000000000000000000000000000000000000000000000004b3fccc3000000000000000000000000000000000000000000000000000000006830f422000000000000000000000000000000000000000000000000000000002e4ea564000000000000000000000000000000000000000000000000000000005e8b3c5800000000000000000000000000000000000000000000000000000000ada6ec39000000000000000000000000000000000000000000000000000000003fac236a000000000000000000000000000000000000000000000000000000004e24b71a000000000000000000000000000000000000000000000000000000002e4ea56400000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec390000000000000000000000000000000000000000000000000000000005ca72bc0000000000000000000000000000000000000000000000000000000005c9d4ad00000000000000000000000000000000000000000000000000000000a21342e00000000000000000000000000000000000000000000000000000000039e24ebe00000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada70eff0000000000000000000000000000000000000000000000000000000039e24ebe00000000000000000000000000000000000000000000000000000000ada6ec390000000000000000000000000000000000000000000000000000000060792de700000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000e7893af60000000000000000000000000000000000000000000000000000000005c9d4ad00000000000000000000000000000000000000000000000000000000ae9de50000000000000000000000000000000000000000000000000000000001216b89b4000000000000000000000000000000000000000000000000000000015b4dd871000000000000000000000000000000000000000000000000000000003ada83a500000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec39000000000000000000000000000000000000000000000000000000002e4ea5640000000000000000000000000000000000000000000000000000000073c49d7b00000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec390000000000000000000000000000000000000000000000000000000005c9d4ad0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000364429d180000000000000000000000000000000000000000000000000000000090b5c4da0000000000000000000000000000000000000000000000000000000090b5c4da0000000000000000000000000000000000000000000000000000000073c49d7b00000000000000000000000000000000000000000000000000000001216b89b40000000000000000000000000000000000000000000000000000000015b4dd870000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000039e24ebe000000000000000000000000000000000000000000000000000000003fac236a00000000000000000000000000000000000000000000000000000000e7893af6000000000000000000000000000000000000000000000000000000000feb08db00000000000000000000000000000000000000000000000000000000744019df0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000005c9d4ad0000000000000000000000000000000000000000000000000000000039e24ebe000000000000000000000000000000000000000000000000000000000feb08db0000000000000000000000000000000000000000000000000000000039e24ebe00000000000000000000000000000000000000000000000000000000ada6ec390000000000000000000000000000000000000000000000000000000005c9d4ad0000000000000000000000000000000000000000000000000000000073c49d7b000000000000000000000000000000000000000000000000000000003fac236a0000000000000000000000000000000000000000000000000000000039e24ebe000000000000000000000000000000000000000000000000000000000feb08db0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000039e24ebe000000000000000000000000000000000000000000000000000000003778e0cb0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000039e24ebe000000000000000000000000000000000000000000000000000000000feb08db000000000000000000000000000000000000000000000000000000000feb08db0000000000000000000000000000000000000000000000000000000039e24ebe00000000000000000000000000000000000000000000000000000000ada6ec3900000000000000000000000000000000000000000000000000000000ada6ec390000000000000000000000000000000000000000000000000000000039e24ebe00000000000000000000000000000000000000000000000000000000447eff4f0000000000000000000000000000000000000000000000000000000073c49d7b0000000000000000000000000000000000000000000000000000000005c9d4ad0000000000000000000000000000000000000000000000000000000073c49d7b00000000000000000000000000000000000000000000000000000000ada6ec390000000000000000000000000000000000000000000000000000000073c49d7b00000000000000000000000000000000000000000000000000000000e7893af60000000000000000000000000000000000000000000000000000000005c9d4ad000000000000000000000000000000000000000000000000000000003778e0cb0000000000000000000000000000000000000000000000000000000073c49d7b0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000039e24ebe000000000000000000000000000000000000000000000000000000000feb08db0000000000000000000000000000000000000000000000000000000039e24ebe000000000000000000000000000000000000000000000000000000004d2dbe520000000000000000000000000000000000000000000000000000000073c49d7b00000000000000000000000000000000000000000000000000000001216b89b40000000000000000000000000000000000000000000000000000000039e24ebe000000000000000000000000000000000000000000000000000000000feb08db0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000039e24ebe0000000000000000000000000000000000000000000000000000000073c49d7b000000000000000000000000000000000000000000000000000000001cf1275f00000000000000000000000000000000000000000000000000000001216b89b400000000000000000000000000000000000000000000000000000001216b89b40000000000000000000000000000000000000000000000000000000090b5c4da000000000000000000000000000000000000000000000000000000001cf1275f000000000000000000000000000000000000000000000000000000004d2dbe52000000000000000000000000000000000000000000000000000000004d2dbe52000000000000000000000000000000000000000000000000000000002696df2900000000000000000000000000000000000000000000000000000002d38cd842000000000000000000000000000000000000000000000000000000002696df2900000000000000000000000000000000000000000000000000000001216b89b4000000000000000000000000000000000000000000000000000000002696df290000000000000000000000000000000000000000000000000000000039e24ebe";
            var lDecoded = new BulksendTokenFunction().DecodeInput(lTestInput);
            Assert.AreEqual(lDecoded.ReceiptAddresses.Count, 146);
            Assert.IsTrue(new BulksendTokenFunction().TryDecodeInput(lTestInput, out IEnumerable<ERC20DataOutput> lOutputs));
            Assert.IsTrue(lOutputs.Any() && (lOutputs.Count() == 146));
            Assert.IsFalse(new BulksendTokenFunction().TryDecodeInput(@"0xa9059cbb000000000000000000000000954da244891733ab0badf630817d26d126d9fec800000000000000000000000000000000000000000000000000000000485c1e8d", out lOutputs));
            Assert.IsFalse(lOutputs.Any());
        }

        [TestMethod]
        public void DecodeERC20TokenTx()
        {
            string lTestInput = @"0xa9059cbb000000000000000000000000954da244891733ab0badf630817d26d126d9fec800000000000000000000000000000000000000000000000000000000485c1e8d";
            var lDecoded = new ERC20TransferFunction().DecodeInput(lTestInput);
            Assert.AreEqual(lDecoded.RecipientAddress.ToLowerInvariant(), "0x954da244891733Ab0BADf630817D26d126d9feC8".ToLowerInvariant());
            Assert.IsTrue(new ERC20TransferFunction().TryDecodeInput(lTestInput, out IEnumerable<ERC20DataOutput> lOutputs));
            Assert.IsTrue(lOutputs.Any() && (lOutputs.Count() == 1));
            Assert.IsFalse(new ERC20TransferFunction().TryDecodeInput(@"0xf6fff9bd0000000000000000000000005d269fac3b2e0552b0f34cdc253bdb427682a4b9000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000012e0302d", out lOutputs));
            Assert.IsFalse(lOutputs.Any());
        }
    }
}